def notifyBuild(String buildStatus, Exception e) {
  buildStatus =  buildStatus ?: 'SUCCESSFUL'

  // Default values
  def colorName = 'RED'
  def colorCode = '#FF0000'
  def subject = "${buildStatus}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'"
  def summary = """*${buildStatus}*: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':\nMore detail in console output at <${env.BUILD_URL}|${env.BUILD_URL}>"""
  def details = """${buildStatus}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':\n
    Check console output at ${env.BUILD_URL} """
  // Override default values based on build status
  if (buildStatus == 'STARTED') {
    color = 'YELLOW'
    colorCode = '#FFFF00'
  } else if (buildStatus == 'SUCCESSFUL') {
    color = 'GREEN'
    colorCode = '#00FF00'
  } else {
    color = 'RED'
    colorCode = '#FF0000'
    details +="<p>Error message ${e.message}, stacktrace: ${e}</p>"
    summary +="\nError message ${e.message}, stacktrace: ${e}"
  }

  // Send notifications

  slackSend channel: "#cals-api", baseUrl: 'https://hooks.slack.com/services/', tokenCredentialId: 'slackmessagetpt2', color: colorCode, message: summary
  emailext(
      subject: subject,
      body: details,
      attachLog: true,
      recipientProviders: [[$class: 'DevelopersRecipientProvider']],
      to: "Leonid.Marushevskiy@osi.ca.gov, Alex.Kuznetsov@osi.ca.gov"
    )
}

node {
   properties([buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '', numToKeepStr: '3')), disableConcurrentBuilds(), 
   parameters([
     choice(choices: ['https://web.preint.cwds.io/intake'], description: '', name: 'APP_URL'), 
	 string(defaultValue: 'feature_set.yml', description: '', name: 'FEATURE_SET'), 
	 choice(choices: ['webkit', 'selenium'], description: 'Driver', name: 'CAPYBARA_DRIVER')]),
   [$class: 'RebuildSettings', autoRebuild: false, rebuildDisabled: false]])
   def errorcode = null;
   def buildInfo = '';

 try {

   stage('Preparation') {
		  cleanWs()
		  checkout scm
   }
   stage('Build Docker'){
        sh 'docker build -t cwds/acceptance_testing .'
		withDockerRegistry([credentialsId: '6ba8d05c-ca13-4818-8329-15d41a089ec0']) {
			sh "docker tag cwds/acceptance_testing cwds/acceptance_testing:${version}"
			//sh "docker push cwds/acceptance_testing cwds/acceptance_testing:${version}"
		}
	 }
   
   stage('Clean WorkSpace') {
     buildInfo = rtGradle.run buildFile: './docker-es-xpack/build.gradle', tasks: 'dockerRemoveContainer'
   }
   stage('Run tests'){
      withEnv(["APP_URL=${APP_URL}",
               "FEATURE_SET=${FEATURE_SET}"],
               "CAPYBARA_DRIVER=${CAPYBARA_DRIVER}") {
                sh 'docker-compose run acceptance_test'
      }
	stage ('Reports') {
                step([$class: 'JUnitResultArchiver', testResults: '**/reports/*.xml'])
    }

	 }
 } catch (Exception e)    {
	   errorcode = e
	   currentBuild.result = "FAIL"
	   notifyBuild(currentBuild.result,errorcode)
	   throw e;
	}
}